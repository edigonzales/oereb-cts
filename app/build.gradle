plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    //id 'org.graalvm.buildtools.native' version '0.9.16'
    id 'org.jreleaser' version '1.2.0'
}

group = 'ch.so.agi'
def myArtifactId = "oereb-cts"
//def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 

sourceCompatibility = 17
targetCompatibility = 17

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
}

configurations {
    all*.exclude group: 'xml-apis'
}

dependencies {
    implementation project(':lib')
    implementation 'ch.ehi:ehibasics:1.4.1'
    
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.ini4j:ini4j:0.5.4'

    implementation 'net.sf.saxon:Saxon-HE:11.4' 

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

application {
    mainClass = 'ch.so.agi.oereb.cts.Main'
}

/*
distributions {
    main {
        distributionBaseName = myArtifactId
    }
}
*/

/*
graalvmNative {
    binaries {
        main {
            imageName = 'oereb-cts'
            mainClass = 'ch.so.agi.oereb.cts.Main' 
            debug = false 
            verbose = true 
            fallback = false 
            configurationFileDirectories.from(file('src/main/resources/META-INF/native-image/')) 
            configurationFileDirectories.from(file("conf-dir/")) 


            buildArgs.add('--enable-url-protocols=http,https') 
            //buildArgs.add('-H:IncludeResourceBundles=com.sun.org.apache.xerces.internal.impl.msg.XMLMessages');
            
            // https://github.com/oracle/graal/issues/4671 
            // Should be fixed in 22.3
            //buildArgs.add("-J--add-modules")
            //buildArgs.add("-JALL-SYSTEM")
            
            //jvmArgs.add("-Djava.awt.headless=false")
            
            //agent {
            //    enabled = true 
            //}
            
        }
        test {
            verbose = true
            fallback = false 
            buildArgs.add('--enable-url-protocols=http,https') 
            //buildArgs.add('-H:IncludeResourceBundles=com.sun.org.apache.xerces.internal.impl.msg.XMLMessages');
        }
    }
}
*/

project.archivesBaseName = myArtifactId + "-app"

startScripts {
   applicationName = myArtifactId
}

distZip {
    archiveBaseName = myArtifactId
}

distTar {
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
    archiveBaseName = myArtifactId
}

/*
distributions {
    nativeImage {
        contents {
            from 'build/native/nativeCompile/'
        }
    }
}

nativeImageDistZip {
    archiveName myArtifactId + '-' + project.version.toString() + '-' + getOperatingSystemName() + '-' + getArchitectureName() + ".zip"
}
*/

tasks.named('test') {
    useJUnitPlatform()
}

run {
    //args = ["--config", "src/test/data/config-all.ini", "--out", "/Users/stefan/tmp/oerebcts/"]
    //args = ["--config", "src/test/data/config-all.ini", "--out", "/Users/stefan/tmp/oerebcts-test-2/"]
    args = ["--config", "config.ini", "--out", "/Users/stefan/tmp/oerebcts-test-2/"]
    //args = ["--help"]
}


jreleaser {
    gitRootSearch = true
    
    project {
        name = myArtifactId
        description = 'OEREB Compliance Test Suite'
        website = 'https://agi.so.ch'
        authors = ['edigonzales']
        license = 'MIT'
        docsUrl = 'https://github.com/edigonzales/oereb-cts'
        copyright = '2023 Stefan Ziegler'
    }
    release {
        github {
            repoOwner = 'edigonzales'
            overwrite = true
            apiEndpoint = 'https://api.github.com'
        }
    }
    distributions {
        appJvm {
            distributionType = 'JAVA_BINARY'
            stereotype = 'CLI'
            artifact {
                path = "../artifacts-jvm/oereb-cts-${version}.zip"
            }
            java {
                groupId = 'ch.so.agi'
                artifactId = myArtifactId
                version = '17'
            }
        }
        /*
        appNative {
            distributionType = 'NATIVE_IMAGE'
            stereotype = 'CLI'
            artifact {
                path = "../artifacts-native/oereb-cts-${version}-linux-x86-64.zip"
                platform = 'linux'
            }
            artifact {
                path = "../artifacts-native/oereb-cts-${version}-osx-x86-64.zip"
                platform = 'osx'
            }
            artifact {
                path = "../artifacts-native/oereb-cts-${version}-windows-x86-64.zip"
                platform = 'windows'
            }
        }
        */
    }
}

/*
def getOperatingSystemName() {
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 
    def osName = os.getName().toLowerCase();
    if (osName.contains("windows")) {
        return "windows";
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return "osx";
    } else if (osName.contains("linux")) {
        return "linux";
    } else {
        // not strictly true
        return "unix";
    }
}

def getArchitectureName() {
    def arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentArchitecture; 
    def archName = arch.getName().toLowerCase();
    return archName;    
}
*/